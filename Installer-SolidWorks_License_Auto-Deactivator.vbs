' Description:
' This VBScript is a wrapper to launch a PowerShell script that installs/is a watcher for exiting SolidWorks.
' It creates a Scheduled Task that runs the watcher script at user logon, which activates once SolidWorks is closed.
' The watcher script will then automatically deactivate the standalone license through the 'SOLIDWORKS Activation Wizard'.

' It takes ~20 seconds to detect the shutdown.
' The 'SOLIDWORKS Activation Wizard' will be left on the "Deactivation Successful" page afterwards, so the user can use this as license deactivation confirmation.

' This will not run if Windows is being shut down/crashing while SolidWorks is running however!


' Usage:
' Double-click the VBScript file to run it.
' It will prompt for the main SOLIDWORKS Corp installation folder. Navigate there via the File Explorer, and copy/paste it from the address bar.
' Edit pollSeconds and windowDelay in SWActivationWatcher.ps1 if on a slow computer or if you want to speed up the process (then reboot).



Set objShell = CreateObject("Shell.Application")
' Create the PowerShell script alongside the VBScript if it doesn't exist
Set fso = CreateObject("Scripting.FileSystemObject")
' Determine the PowerShell script path based on this VBScriptâ€™s folder
Dim scriptFolder
scriptFolder = fso.GetParentFolderName(WScript.ScriptFullName)
psPath = scriptFolder & "\SWActivationWatcher.ps1"
Set file = fso.CreateTextFile(psPath, True)
file.WriteLine "#Requires -RunAsAdministrator"
file.WriteLine "<#"
file.WriteLine ".SYNOPSIS"
file.WriteLine "    Installs and runs a watcher to automatically handle the SolidWorks activation prompt on close."
file.WriteLine "    This script is self-relocating and designed to be launched by an admin batch file."
file.WriteLine ""
file.WriteLine ".DESCRIPTION"
file.WriteLine "INSTALLER MODE:"
file.WriteLine " - Asks for the main SOLIDWORKS Corp installation folder."
file.WriteLine " - Creates a 'Scripts' subfolder inside the SOLIDWORKS Corp directory."
file.WriteLine " - Copies itself to this new, permanent location."
file.WriteLine " - Creates a Scheduled Task that runs the *copied* script at user logon."
file.WriteLine " - Starts the Scheduled Task immediately after creation."
file.WriteLine ""
file.WriteLine "WATCHER MODE (Executed by the Scheduled Task):"
file.WriteLine " - Runs silently in the background, monitoring for the SolidWorks process to close."
file.WriteLine " - When SolidWorks closes, it launches the activation wizard and disables the license."
file.WriteLine "#>"
file.WriteLine "[CmdletBinding()]"
file.WriteLine "param ("
file.WriteLine "    [string]$RunWatcherWithActivatorPath"
file.WriteLine ")"
file.WriteLine ""
file.WriteLine "# Timing Parameters"
file.WriteLine "$pollSeconds     = 5   # How often to check if SolidWorks is running"
file.WriteLine "$windowDelay     = 3   # How long to wait for the activation wizard window to appear"
file.WriteLine ""
file.WriteLine "# Button Text Configuration - Set these based on your SOLIDWORKS language, etc."
file.WriteLine "$firstNextButtonLabel  = ""Next >""       # The button that progresses the wizard to the second page"
file.WriteLine "$selectAllButtonLabel  = ""Select All""   # The button that selects all licenses"
file.WriteLine "$secondNextButtonLabel = ""Next >""       # The button that progresses the wizard to the third page"
file.WriteLine ""
file.WriteLine "# --- WATCHER MODE ---"
file.WriteLine "if (-not [string]::IsNullOrEmpty($RunWatcherWithActivatorPath)) {"
file.WriteLine "    Add-Type -AssemblyName System.Windows.Forms -ErrorAction SilentlyContinue"
file.WriteLine "    Add-Type -TypeDefinition @"" "
file.WriteLine "    using System;"
file.WriteLine "    using System.Runtime.InteropServices;"
file.WriteLine "    public static class NativeMethods {"
file.WriteLine "        [DllImport(""user32.dll"", SetLastError = false)]"
file.WriteLine "        public static extern bool SetForegroundWindow(IntPtr hWnd);"
file.WriteLine ""
file.WriteLine "        [DllImport(""user32.dll"", SetLastError = true, CharSet = CharSet.Auto)]"
file.WriteLine "        public static extern IntPtr FindWindowEx("
file.WriteLine "            IntPtr hwndParent,"
file.WriteLine "            IntPtr hwndChildAfter,"
file.WriteLine "            string lpszClass,"
file.WriteLine "            string lpszWindow);"
file.WriteLine ""
file.WriteLine "        [DllImport(""user32.dll"", CharSet = CharSet.Auto)]"
file.WriteLine "        public static extern IntPtr SendMessage("
file.WriteLine "            IntPtr hWnd,"
file.WriteLine "            uint Msg,"
file.WriteLine "            IntPtr wParam,"
file.WriteLine "            IntPtr lParam);"
file.WriteLine "    }"
file.WriteLine """@ -ErrorAction SilentlyContinue"
file.WriteLine ""
file.WriteLine "    Add-Type -TypeDefinition @"" "
file.WriteLine "using System;"
file.WriteLine "using System.Runtime.InteropServices;"
file.WriteLine "using System.Text;"
file.WriteLine "public static class Win32 {"
file.WriteLine "    public delegate bool EnumChildProc(IntPtr hWnd, IntPtr lParam);"
file.WriteLine "    [DllImport(""user32.dll"", SetLastError=true)]"
file.WriteLine "    public static extern bool EnumChildWindows(IntPtr hWndParent, EnumChildProc lpEnumFunc, IntPtr lParam);"
file.WriteLine "    [DllImport(""user32.dll"", CharSet=CharSet.Auto)]"
file.WriteLine "    public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);"
file.WriteLine "    [DllImport(""user32.dll"", CharSet=CharSet.Auto)]"
file.WriteLine "    public static extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, IntPtr wParam, IntPtr lParam);"
file.WriteLine "    public const UInt32 BM_CLICK = 0x00F5;"
file.WriteLine "}"
file.WriteLine """@ -ErrorAction SilentlyContinue"
file.WriteLine ""
file.WriteLine "    Add-Type -TypeDefinition @"" "
file.WriteLine "namespace SWAW {"
file.WriteLine "    using System.Runtime.InteropServices;"
file.WriteLine "    public static class KeyHelper {"
file.WriteLine "        [DllImport(""user32.dll"")]"
file.WriteLine "        public static extern short GetAsyncKeyState(int vKey);"
file.WriteLine "    }"
file.WriteLine "}"
file.WriteLine """@ -Language CSharp -ErrorAction SilentlyContinue"
file.WriteLine ""
file.WriteLine "    # Constants"
file.WriteLine "    $BM_CLICK = 0x00F5"
file.WriteLine "    $swProcessName = 'SLDWORKS'"
file.WriteLine "    $activationExe = $RunWatcherWithActivatorPath"
file.WriteLine "    # Log file path"
file.WriteLine "    $wasRunning      = $false"
file.WriteLine ""
file.WriteLine "    if (-not (Test-Path $activationExe)) { exit }"
file.WriteLine ""
file.WriteLine "    while ($true) {"
file.WriteLine "        $running = Get-Process -Name $swProcessName -ErrorAction SilentlyContinue"
file.WriteLine "        if (-not $running -and $wasRunning) {"
file.WriteLine "            try {"
file.WriteLine "                # Launch the GUI wizard"
file.WriteLine "                $wizProc = Start-Process -FilePath $activationExe -PassThru"
file.WriteLine ""
file.WriteLine "                # If the user is currently holding down the Spacebar, stop the following actions. Use this to prevent accidental deactivation."
file.WriteLine "                if ([SWAW.KeyHelper]::GetAsyncKeyState(0x20) -band 0x8000) { # Virtual-key code for SPACE is 0x20; high-order bit set means key is down"
file.WriteLine "                    throw ""User is holding down the Spacebar key, stopping the activation process."""
file.WriteLine "                }"
file.WriteLine ""
file.WriteLine "                # Wait for the activation wizard window to appear"
file.WriteLine "                Start-Sleep -Seconds $windowDelay"
file.WriteLine ""
file.WriteLine "                # Bring it to foreground"
file.WriteLine "                if ($wizProc.MainWindowHandle -ne [IntPtr]::Zero) {"
file.WriteLine "                    [NativeMethods]::SetForegroundWindow($wizProc.MainWindowHandle) | Out-Null"
file.WriteLine "                }"
file.WriteLine ""
file.WriteLine "                # If the user is currently holding down the Spacebar, stop the following actions. Use this to prevent accidental deactivation."
file.WriteLine "                if ([SWAW.KeyHelper]::GetAsyncKeyState(0x20) -band 0x8000) { # Virtual-key code for SPACE is 0x20; high-order bit set means key is down"
file.WriteLine "                    throw ""User is holding down the Spacebar key, stopping the activation process."""
file.WriteLine "                }"
file.WriteLine ""
file.WriteLine "                # Click the first Next button"
file.WriteLine "                $btn = [NativeMethods]::FindWindowEx("
file.WriteLine "                    $wizProc.MainWindowHandle,"
file.WriteLine "                    [IntPtr]::Zero,"
file.WriteLine "                    ""Button"","
file.WriteLine "                    (""&"" + $firstNextButtonLabel)"
file.WriteLine "                )"
file.WriteLine "                if ($btn -eq [IntPtr]::Zero) {"
file.WriteLine "                    throw ""Could not find '$firstNextButtonLabel' button on page 1"""
file.WriteLine "                }"
file.WriteLine "                [NativeMethods]::SendMessage($btn, $BM_CLICK, [IntPtr]::Zero, [IntPtr]::Zero) | Out-Null"
file.WriteLine "                Start-Sleep -Milliseconds 100"
file.WriteLine ""
file.WriteLine "                # Enumerate child windows to find 'Select All' button"
file.WriteLine "                $clickedSA = $false"
file.WriteLine "                $enum = {"
file.WriteLine "                    param($hWnd, $lParam)"
file.WriteLine "                    $sb = New-Object Text.StringBuilder 256"
file.WriteLine "                    [Win32]::GetWindowText($hWnd, $sb, $sb.Capacity) | Out-Null"
file.WriteLine "                    if ($sb.ToString() -eq $selectAllButtonLabel) {"
file.WriteLine "                        [Win32]::SendMessage($hWnd, [Win32]::BM_CLICK, [IntPtr]::Zero, [IntPtr]::Zero) | Out-Null"
file.WriteLine "                        $global:clickedSA = $true"
file.WriteLine "                        return $false    # stop further enumeration"
file.WriteLine "                    }"
file.WriteLine "                    return $true"
file.WriteLine "                }.GetNewClosure()"
file.WriteLine "                [Win32]::EnumChildWindows($wizProc.MainWindowHandle, $enum, [IntPtr]::Zero) | Out-Null"
file.WriteLine "                if (-not $clickedSA) {"
file.WriteLine "                    throw ""Could not find '$selectAllButtonLabel' button via enumeration on page 2"""
file.WriteLine "                }"
file.WriteLine "                Start-Sleep -Milliseconds 100"
file.WriteLine ""
file.WriteLine "                # Click second Next"
file.WriteLine "                $btn = [NativeMethods]::FindWindowEx("
file.WriteLine "                    $wizProc.MainWindowHandle,"
file.WriteLine "                    [IntPtr]::Zero,"
file.WriteLine "                    ""Button"","
file.WriteLine "                    (""&"" + $secondNextButtonLabel)"
file.WriteLine "                )"
file.WriteLine "                if ($btn -eq [IntPtr]::Zero) {"
file.WriteLine "                    throw ""Could not find '$secondNextButtonLabel' button on page 2"""
file.WriteLine "                }"
file.WriteLine "                [NativeMethods]::SendMessage($btn, $BM_CLICK, [IntPtr]::Zero, [IntPtr]::Zero) | Out-Null"
file.WriteLine "                Start-Sleep -Milliseconds 100"
file.WriteLine ""
file.WriteLine "            }"
file.WriteLine "            catch {"
file.WriteLine "                Add-Content -Path ""$env:ProgramData\SWActivationWatcher.log"" `"
file.WriteLine "                    -Value ""$(Get-Date -Format o)  ERROR: $($_.Exception.Message)"""
file.WriteLine ""                    
file.WriteLine "                # If user stopped deactivation via Spacebar, prompt them"
file.WriteLine "                if ($_.Exception.Message -match 'stopping the activation process') {"
file.WriteLine "                    # Show a top-most message box so the user sees it immediately"
file.WriteLine "                    [System.Windows.Forms.MessageBox]::Show("
file.WriteLine "                        ""The SolidWorks License Deactivator was stopped by the user, please manually disable the license and/or close the Wizard."","
file.WriteLine "                        ""SolidWorks License Deactivator Stopped"","
file.WriteLine "                        [System.Windows.Forms.MessageBoxButtons]::OK,"
file.WriteLine "                        [System.Windows.Forms.MessageBoxIcon]::Information,"
file.WriteLine "                        [System.Windows.Forms.MessageBoxDefaultButton]::Button1,"
file.WriteLine "                        [System.Windows.Forms.MessageBoxOptions]::ServiceNotification"
file.WriteLine "                    ) | Out-Null"
file.WriteLine "                }"
file.WriteLine "            }"
file.WriteLine "        }"
file.WriteLine ""
file.WriteLine "        $wasRunning = [bool]$running"
file.WriteLine "        Start-Sleep -Seconds $pollSeconds"
file.WriteLine "    }"
file.WriteLine "    exit"
file.WriteLine "}"
file.WriteLine ""
file.WriteLine "# --- INSTALLER MODE ---"
file.WriteLine "if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] ""Administrator"")) {"
file.WriteLine "    Write-Host ""ERROR: This script must be run with Administrator rights."" -ForegroundColor Red"
file.WriteLine "    Write-Host ""Please run the 'run-installer.bat' file as an Administrator."" -ForegroundColor Yellow"
file.WriteLine "    Read-Host ""Press Enter to exit"""
file.WriteLine "    exit"
file.WriteLine "}"
file.WriteLine ""
file.WriteLine "function Write-HostColored { param($Message, $Color); Write-Host $Message -ForegroundColor $Color }"
file.WriteLine "Clear-Host"
file.WriteLine "Write-HostColored ""=========================================="" -Color Green"
file.WriteLine "Write-HostColored "" SolidWorks Activation Watcher Installer"" -Color Green"
file.WriteLine "Write-HostColored ""=========================================="" -Color Green"
file.WriteLine "Write-Host """""
file.WriteLine "Write-HostColored ""Administrator rights detected. Ready to install."" -Color Green"
file.WriteLine "Write-Host """""
file.WriteLine ""
file.WriteLine "$swParentFolder = Read-Host ""Enter path to the main SOLIDWORKS Corp folder (e.g., 'C:\Program Files\SOLIDWORKS Corp')"""
file.WriteLine "if (-not (Test-Path -Path $swParentFolder -PathType Container)) {"
file.WriteLine "    Write-HostColored "" ERROR: The folder '$swParentFolder' does not exist."" -Color Red"
file.WriteLine "    Read-Host ""Press Enter to exit""; exit"
file.WriteLine "}"
file.WriteLine ""
file.WriteLine "$installDir = Join-Path -Path $swParentFolder -ChildPath ""Scripts"""
file.WriteLine "$installPath = Join-Path -Path $installDir -ChildPath ""SWActivationWatcher.ps1"""
file.WriteLine "$scriptCurrentPath = $MyInvocation.MyCommand.Path"
file.WriteLine ""
file.WriteLine "Write-Host """""
file.WriteLine "Write-HostColored ""Preparing installation..."" -Color Cyan"
file.WriteLine "if (-not (Test-Path -Path $installDir)) { New-Item -Path $installDir -ItemType Directory | Out-Null }"
file.WriteLine "Copy-Item -Path $scriptCurrentPath -Destination $installPath -Force"
file.WriteLine "Write-Host "" -> Script copied to permanent location: $installPath"""
file.WriteLine ""
file.WriteLine "Write-Host "" -> Searching for swactwiz.exe..."""
file.WriteLine "$activator = Get-ChildItem -Path $swParentFolder -Filter ""swactwiz.exe"" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1"
file.WriteLine "if (-not $activator) {"
file.WriteLine "    Write-HostColored "" ERROR: Could not find swactwiz.exe."" -Color Red"
file.WriteLine "    Read-Host ""Press Enter to exit""; exit"
file.WriteLine "}"
file.WriteLine "$activatorPath = $activator.FullName"
file.WriteLine "Write-HostColored ""Found activator at: $activatorPath"" -Color Green"
file.WriteLine ""
file.WriteLine "Write-Host "" -> Creating Scheduled Task to run on login..."""
file.WriteLine "$taskName = ""SWActivationWatcher"""
file.WriteLine "$taskAction = New-ScheduledTaskAction -Execute ""powershell.exe"" -Argument ""-NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File `""$installPath`"" -RunWatcherWithActivatorPath `""$activatorPath`"""""
file.WriteLine "$taskTrigger = New-ScheduledTaskTrigger -AtLogOn"
file.WriteLine "$taskPrincipal = New-ScheduledTaskPrincipal -UserId (whoami) -LogonType Interactive -RunLevel Highest"
file.WriteLine "Register-ScheduledTask -TaskName $taskName -Action $taskAction -Trigger $taskTrigger -Principal $taskPrincipal -Description ""Monitors for SolidWorks closing and handles the activation prompt."" -Force | Out-Null"
file.WriteLine ""
file.WriteLine "# Start the task immediately so the user doesn't have to wait for a reboot."
file.WriteLine "Write-Host "" -> Starting the watcher task now for the current session..."""
file.WriteLine "try {"
file.WriteLine "    Start-ScheduledTask -TaskName $taskName"
file.WriteLine "    Write-HostColored ""Watcher task is now running in the background."" -Color Green"
file.WriteLine "} catch {"
file.WriteLine "    Write-HostColored ""Could not start the task immediately. It will start automatically on the next login."" -Color Yellow"
file.WriteLine "}"
file.WriteLine ""
file.WriteLine "Write-Host """""
file.WriteLine "Write-HostColored ""Success! Installation is complete."" -Color Green"
file.WriteLine "Try { Remove-Item -Path $MyInvocation.MyCommand.Path -Force -ErrorAction SilentlyContinue } Catch {}"
file.WriteLine "Write-Host """""
file.WriteLine "Write-Host ""The installed task script is located at:"""
file.WriteLine "Write-Host $installPath -ForegroundColor White"
file.Close

' Launch PowerShell as administrator and bypass execution policy, run via cmd.exe with /k to keep console open
objShell.ShellExecute "cmd.exe", "/k powershell.exe -NoProfile -ExecutionPolicy Bypass -File """ & psPath & """", "", "runas", 1
